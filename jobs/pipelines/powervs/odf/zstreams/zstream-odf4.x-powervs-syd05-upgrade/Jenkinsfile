@Library('jenkins-upstream-library') _

pipeline {
    agent {
        kubernetes {
            inheritFrom 'jenkins-agent'
        }
    }
    parameters {
            string(defaultValue: '', description: 'OCP version on which OCS/ODF will be deployed', name: 'ocpVersion')
            string(defaultValue: '', description: 'OCS version which you want to upgrade', name: 'ocsVersion')
            string(defaultValue: '', description: 'rhceph-dev/ocs-registry Image used for deploying OCS/ODF', name: 'ocsRegistryImage')
            string(defaultValue: '', description: 'OCS version in which you want to upgrade', name: 'ocsUpgradeVersion')
            string(defaultValue: '', description: 'rhceph-dev/ocs-registry image of upgraded ocs version', name: 'ocsUpgradeRegistryImage')
            string(defaultValue: '720', description: 'Enter time(in Minutes) to retain the cluster', name: 'KeepFor')
        }
    environment {
       //users and credentials. All must be defined in Jenkins Credentials
       GITHUB_USER = credentials('GITHUB_USER')
       IBMCLOUD_API_KEY = credentials('ODF_IBMCLOUD_API_KEY')
       GITHUB_TOKEN = credentials('GITHUB_TOKEN')
       REDHAT_USERNAME = credentials('REDHAT_USERNAME')
       REDHAT_PASSWORD = credentials('REDHAT_PASSWORD')
       PULL_SECRET = credentials('ODF_PULL_SECRET')

       // Parameters
       OCP_RELEASE = "${params.ocpVersion}"
       ODF_VERSION = "${params.ocsVersion}"
       UPGRADE_OCS_VERSION = "${params.ocsUpgradeVersion}"
       OCS_REGISTRY_IMAGE = "${params.ocsRegistryImage}"
       UPGRADE_OCS_REGISTRY = "${params.ocsUpgradeRegistryImage}"
       TIMEOUT = "${params.KeepFor}"

       //Env constants
       TERRAFORM_VER = "1.2.0"

       IBM_CLOUD_REGION = "syd"
       IBM_CLOUD_ZONE = "syd05"
       SERVICE_INSTANCE_ID = "22bd163a-c87c-4cea-90d2-58f7794caa43"

       TARGET = "deploy-openshift4-powervs-script"
       TEMPLATE_FILE = ".${TARGET}.tfvars.template"
       POWERVS = true
       SCRIPT_DEPLOYMENT = true
       WAIT_FOR_DEBUG = "1"

       //ODF vars
       PLATFORM = "powervs"
       TIER_TEST = "1"
       ENABLE_FIPS = false
       ENABLE_VAULT = false
       CONFIG_TYPE = "odf"

	}
    stages {
        stage('Setup Common Environment Variables') {
            steps {
                setupCommonEnvironmentVariables()
                setupClusterConfig("${CONFIG_TYPE}")
            }
        }
        stage('Setting RHCOS and RHEL Images as per OCP version') {
            steps {
                script {
                    switch (env.OCP_RELEASE) {
                        case "4.6":
                            env.BASTION_IMAGE = "rhel-83"
                            env.RHCOS_IMAGE = "rhcos-46"
                            break
                        case "4.7":
                            env.BASTION_IMAGE = "rhel-83"
                            env.RHCOS_IMAGE = "rhcos-47"
                            break
                        case "4.8":
                            env.BASTION_IMAGE = "rhel-83"
                            env.RHCOS_IMAGE = "rhcos-48"
                            break
                        case "4.9":
                            env.BASTION_IMAGE = "rhel-84"
                            env.RHCOS_IMAGE = "rhcos-49"
                            break
                        case "4.10":
                            env.BASTION_IMAGE = "rhel-84"
                            env.RHCOS_IMAGE = "rhcos-410"
                            break
                        case "4.11":
                            env.BASTION_IMAGE = "rhel-85"
                            env.RHCOS_IMAGE = "rhcos-411"
                            break
                        default:
                             env.BASTION_IMAGE = "rhel-86"
                             env.RHCOS_IMAGE = "rhcos-412"
                    }

                    BASTION_IMAGE_FILE = "latest-${BASTION_IMAGE}-rdr-ocp-storage-sydney05-odf.txt"
                    RHCOS_IMAGE_FILE = "latest-${RHCOS_IMAGE}-rdr-ocp-storage-sydney05-odf.txt"
                }
            }
        }
        stage('pull artifact') {
            steps {
                getArtifacts("mirror-openshift-release", "latest-${OCP_RELEASE}-build.txt" )
                getArtifacts("powervs/poll-powervs-images", "${BASTION_IMAGE_FILE}")
                getArtifacts("powervs/poll-powervs-images", "${RHCOS_IMAGE_FILE}" )
            }
        }
        //Checkout the installer git repo
        stage('Prepare Terraform Template') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try
                    {
                        pullSecret()
                        env.OPENSHIFT_IMAGE = ""
                        env.OCP_RELEASE_TAG = ""
                        if (fileExists("deploy/artifactory/latest-${OCP_RELEASE}-build.txt")) {
                            env.OPENSHIFT_IMAGE = readFile "deploy/artifactory/latest-${OCP_RELEASE}-build.txt"
                            env.OPENSHIFT_IMAGE = env.OPENSHIFT_IMAGE.trim()
                            env.OCP_RELEASE_TAG = env.OPENSHIFT_IMAGE.split(":")[1].trim()
                        }
                        else {
                            echo "latest-${OCP_RELEASE}-build.txt file does not exist. Please check mirror-openshift-release job"
                            throw err
                        }
                        if (fileExists("deploy/artifactory/${BASTION_IMAGE_FILE}")) {
                            env.BASTION_IMAGE_NAME = readFile "deploy/artifactory/${BASTION_IMAGE_FILE}"
                            env.BASTION_IMAGE_NAME = env.BASTION_IMAGE_NAME.trim()
                        }
                        else{
                            echo "${BASTION_IMAGE_FILE} file does not exist. Please check poll-powervs-job"
                            throw err
                        }
                        if (fileExists("deploy/artifactory/${RHCOS_IMAGE_FILE}")) {
                            env.RHCOS_IMAGE_NAME = readFile "deploy/artifactory/${RHCOS_IMAGE_FILE}"
                            env.RHCOS_IMAGE_NAME = env.RHCOS_IMAGE_NAME.trim()
                        }
                        else{
                            echo "${RHCOS_IMAGE_FILE} file does not exist. Please check poll-powervs-job"
                            throw err
                        }
                    }
                    catch (err)
                    {
                        echo 'Error ! Template preparation failed !'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                }
            }
        }
        stage('Initialize Environment') {
            steps {
                initializeEnvironment("us-south", "ocs-resource-group")
                script{
                    env.SYSTEM_TYPE = "s922"
                }
            }
        }
        stage('Setup Terraform Plugin') {
            steps {
                setupTerraformPlugin()
            }
        }
        stage('Deploy OCP Cluster') {
            steps {
                deployCluster()
            }
        }
        stage('Setup Kubectl') {
            steps {
                setupKubeconfigOcp4()
            }
        }
        stage('Run ODF Setup script') {
            steps {
                odfAuthYaml()
                odfRunSetupScript()
            }
        }
        stage('Run ODF deploy script') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                           ssh -o 'StrictHostKeyChecking=no' -i ${WORKSPACE}/deploy/id_rsa root@${BASTION_IP} "cp -r /root/openstack-upi/auth/ /root/; cp /usr/local/bin/oc /root/ocs-upi-kvm/src/ocs-ci/bin/; mkdir /root/bin; cp /usr/local/bin/oc /root/bin/;"
                           ssh -o 'StrictHostKeyChecking=no' -o 'ServerAliveInterval=5' -o 'ServerAliveCountMax 1200'  -i ${WORKSPACE}/deploy/id_rsa root@${BASTION_IP} "source /root/env_vars.sh; cd /root/ocs-upi-kvm/scripts;  ./deploy-ocs-ci.sh > deploy-ocs-ci.log "
                        '''
                    }
                    catch (err) {
                        echo 'Error ! ODF deploy script failed!'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                }
            }
        }
        stage('Capture ODF cluster status before Upgrade') {
            steps {
                odfRunCommands()
            }
        }
        stage('Upgrading ODF') {
            steps {
                script {
                        ansiColor('xterm') {
                            echo ""
                        }
                        try {
                            sh '''
                               ssh -o 'StrictHostKeyChecking no' -o 'ServerAliveInterval=5' -o 'ServerAliveCountMax 1200' -i ${WORKSPACE}/deploy/id_rsa root@${BASTION_IP} "source env_vars.sh; echo "Upgrading ODF to ${UPGRADE_OCS_VERSION}"; cd /root/ocs-upi-kvm/scripts; ./upgrade-ocs-ci.sh > upgrade-ocs-ci.log ; "
                               scp -o 'StrictHostKeyChecking no' -i ${WORKSPACE}/deploy/id_rsa root@${BASTION_IP}:/root/ocs-upi-kvm/scripts/upgrade-ocs-ci.log ${WORKSPACE}/
                               ssh -o 'StrictHostKeyChecking no' -o 'ServerAliveInterval=5' -o 'ServerAliveCountMax 1200' -i ${WORKSPACE}/deploy/id_rsa root@${BASTION_IP} "odf_csv=`oc get csv -n openshift-storage |grep odf-operator | awk {'print $1'}`; oc get csv $odf_csv -n openshift-storage -o yaml |grep full_version |awk {'print $2'} | tail -n 1 > odf-full-build.txt ; "
                               scp -o 'StrictHostKeyChecking no' -i ${WORKSPACE}/deploy/id_rsa root@${BASTION_IP}:/root/odf-full-build.txt ${WORKSPACE}/
                            '''
                            env.ODF_BUILD = readFile "odf-full-build.txt"

                        }
                        catch (err) {
                            echo 'Error ! ODF Upgrade using upgrade-ocs-ci.sh failed!'
                            env.FAILED_STAGE=env.STAGE_NAME
                            throw err
                        }
                }
            }
        }
        stage('ODF cluster status after Upgrade') {
            steps {
                odfRunCommands()
            }
        }
        stage('Run ODF tier tests') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                           ssh -o 'StrictHostKeyChecking no' -i ${WORKSPACE}/deploy/id_rsa root@${BASTION_IP} "pip3 install yq"
                           ssh -o 'StrictHostKeyChecking no' -i ${WORKSPACE}/deploy/id_rsa root@${BASTION_IP} 'source env_vars.sh; export OCS_VERSION=`echo ${UPGRADE_OCS_VERSION} | cut -d "." -f 1-2`; export OCS_CSV_CHANNEL=stable-$OCS_VERSION; yq -y -i ".DEPLOYMENT.ocs_csv_channel |= env.OCS_CSV_CHANNEL" /root/ocs-ci-conf.yaml; yq -y -i ".ENV_DATA.ocs_version |= env.OCS_VERSION" /root/ocs-ci-conf.yaml'
                           ssh -o 'StrictHostKeyChecking no' -i ${WORKSPACE}/deploy/id_rsa root@${BASTION_IP} "cat /root/ocs-ci-conf.yaml"
                           ssh -o 'StrictHostKeyChecking=no' -o 'ServerAliveInterval=5' -o 'ServerAliveCountMax 1200' -i ${WORKSPACE}/deploy/id_rsa root@${BASTION_IP} "cd ocs-upi-kvm/scripts/; source /root/env_vars.sh; export OCS_VERSION=`echo ${UPGRADE_OCS_VERSION} | cut -d "." -f 1-2`; echo "Testing on ODF Version $OCS_VERSION"; ./test-ocs-ci.sh --tier ${TIER_TEST} > tier${TIER_TEST}.log "
                           scp -i ${WORKSPACE}/deploy/id_rsa -o 'StrictHostKeyChecking=no' root@${BASTION_IP}:/root/ocs-upi-kvm/scripts/tier${TIER_TEST}.log ${WORKSPACE}
                        '''
                    }
                    catch (err) {
                        echo 'Error ! Tier test script failed!'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                 }
             }
        }
        stage('Capture tier test summary and compress results') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        sh '''
                              FILE=tier${TIER_TEST}.log
                              sed -n '/short test summary info/, /Test result:/p' tier${TIER_TEST}.log > tier${TIER_TEST}-summary.txt
                              echo "Upgraded ODF from `echo $OCS_REGISTRY_IMAGE | cut -d ":" -f 2 | tr -dc '[. [:digit:]]'` to ${UPGRADE_OCS_VERSION}" > slacksummary.txt
                              sed -n '/short test summary info/, /Test result:/p' tier${TIER_TEST}.log | awk '/passed/||/failed/||/skipped/' | sed 's/=*//g' >> slacksummary.txt
                              tar -cvzf test-log.tar.gz tier${TIER_TEST}.log
                        '''
                    }
                    catch (err) {
                        echo 'Error ! Capturing tier test summary failed!'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                }
            }
        }
        stage('Waiting to timeout') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try {
                        TIMEOUT_MIN = TIMEOUT.toInteger()
                        if ( TIMEOUT_MIN != 0 ){
                            TIMEOUT_SEC=TIMEOUT_MIN*60
                            echo "HOLDING THE CLUSTER TEAR DOWN FOR ${TIMEOUT_MIN} MINUTES"
                            sleep TIMEOUT_SEC
                        }
                    }
                    catch (err) {
                        echo 'Error ! Timeout stage failed!'
                        env.FAILED_STAGE=env.STAGE_NAME
                        throw err
                    }
                }
            }
        } 
    }
    post {
        always {
            archiveAllArtifacts("test-log.tar.gz", "deploy/results.tar.gz", "tier${TIER_TEST}-summary.txt")
            cleanupOcp4Cluster()
            checkInfraError()
            odfProcessTierTestResults()
            cleanupPowerVSResources()
            notifyBySlack(currentBuild.result, env.MESSAGE)
            cleanWs()
        }
    }
}

