TERRAFORM_DIR ?= $(PWD)
TERRAFORM_VARS_FILE ?=
TERRAFORM_OUTPUT_VAR ?=
TERRAFORM_STATE_FILE ?= $(TERRAFORM_DIR)/terraform.tfstate

.PHONY: terraform\:init
## Ensure all plugins can be fetched
terraform\:init:
	@$(shell) terraform -chdir=$(TERRAFORM_DIR) init -backend=false -lock=false -input=false >/dev/null

.PHONY: terraform\:apply
## Run terraform apply with -var-file (TERRAFORM_VARS_FILE) in dir (TERRAFORM_DIR)
terraform\:apply:
	@$(shell) terraform -chdir=$(TERRAFORM_DIR) apply -parallelism=3 -input=false -auto-approve -lock=false -var-file="$(TERRAFORM_VARS_FILE)" -state="$(TERRAFORM_STATE_FILE)"

.PHONY: terraform\:destroy
## Destroy terraform resources
terraform\:destroy:
ifeq ($(shell test -d $(TERRAFORM_DIR) && echo -n yes),yes)
	@$(shell) terraform -chdir=$(TERRAFORM_DIR) destroy -parallelism=3 -input=false -auto-approve -var-file="$(TERRAFORM_VARS_FILE)" -state="$(TERRAFORM_STATE_FILE)"
endif

.PHONY: terraform\:output
## Print terraform output variable value
terraform\:output: %output:
	@$(shell) terraform -chdir=$(TERRAFORM_DIR) output -state="$(TERRAFORM_STATE_FILE)" $(TERRAFORM_OUTPUT_VAR)
